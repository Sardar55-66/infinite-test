import { createSlice } from "@reduxjs/toolkit";
import generateUsers from "../utils/generateUsers";

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export interface User {
  id: number;
  name: string;
  department: string | null;
  company: string | null;
  jobTitle: string | null;
}

// –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
const initialState = {
  users: generateUsers(10000), // üî• –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  selectedUser: null as User | null, // ‚ùå –¢–µ–ø–µ—Ä—å –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ null
};

// –°–æ–∑–¥–∞—ë–º Redux Slice
const userSlice = createSlice({
  name: "users",
  initialState,
  reducers: {
    selectUser: (state, action) => {
      state.selectedUser = action.payload;
    },
    updateUser: (state, action) => {
      state.users = state.users.map((user) =>
        user.id === action.payload.id
          ? { ...user, ...action.payload } // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–≥–æ —é–∑–µ—Ä–∞
          : user
      );
      if (state.selectedUser?.id === action.payload.id) {
        state.selectedUser = { ...state.selectedUser, ...action.payload }; // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ `selectedUser`
      }
    },
  },
});


export { userSlice };
